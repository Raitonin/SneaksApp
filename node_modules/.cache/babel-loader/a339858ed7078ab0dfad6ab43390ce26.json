{"ast":null,"code":"'use strict';\n\nconst pump = require('pump');\n\nconst bufferStream = require('./buffer-stream');\n\nclass MaxBufferError extends Error {\n  constructor() {\n    super('maxBuffer exceeded');\n    this.name = 'MaxBufferError';\n  }\n\n}\n\nasync function getStream(inputStream, options) {\n  if (!inputStream) {\n    return Promise.reject(new Error('Expected a stream'));\n  }\n\n  options = {\n    maxBuffer: Infinity,\n    ...options\n  };\n  const {\n    maxBuffer\n  } = options;\n  let stream;\n  await new Promise((resolve, reject) => {\n    const rejectPromise = error => {\n      if (error) {\n        // A null check\n        error.bufferedData = stream.getBufferedValue();\n      }\n\n      reject(error);\n    };\n\n    stream = pump(inputStream, bufferStream(options), error => {\n      if (error) {\n        rejectPromise(error);\n        return;\n      }\n\n      resolve();\n    });\n    stream.on('data', () => {\n      if (stream.getBufferedLength() > maxBuffer) {\n        rejectPromise(new MaxBufferError());\n      }\n    });\n  });\n  return stream.getBufferedValue();\n}\n\nmodule.exports = getStream; // TODO: Remove this for the next major release\n\nmodule.exports.default = getStream;\n\nmodule.exports.buffer = (stream, options) => getStream(stream, { ...options,\n  encoding: 'buffer'\n});\n\nmodule.exports.array = (stream, options) => getStream(stream, { ...options,\n  array: true\n});\n\nmodule.exports.MaxBufferError = MaxBufferError;","map":{"version":3,"sources":["/Users/dhruv/Sneaks/sneaks-website/node_modules/cacheable-request/node_modules/get-stream/index.js"],"names":["pump","require","bufferStream","MaxBufferError","Error","constructor","name","getStream","inputStream","options","Promise","reject","maxBuffer","Infinity","stream","resolve","rejectPromise","error","bufferedData","getBufferedValue","on","getBufferedLength","module","exports","default","buffer","encoding","array"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAA5B;;AAEA,MAAME,cAAN,SAA6BC,KAA7B,CAAmC;AAClCC,EAAAA,WAAW,GAAG;AACb,UAAM,oBAAN;AACA,SAAKC,IAAL,GAAY,gBAAZ;AACA;;AAJiC;;AAOnC,eAAeC,SAAf,CAAyBC,WAAzB,EAAsCC,OAAtC,EAA+C;AAC9C,MAAI,CAACD,WAAL,EAAkB;AACjB,WAAOE,OAAO,CAACC,MAAR,CAAe,IAAIP,KAAJ,CAAU,mBAAV,CAAf,CAAP;AACA;;AAEDK,EAAAA,OAAO,GAAG;AACTG,IAAAA,SAAS,EAAEC,QADF;AAET,OAAGJ;AAFM,GAAV;AAKA,QAAM;AAACG,IAAAA;AAAD,MAAcH,OAApB;AAEA,MAAIK,MAAJ;AACA,QAAM,IAAIJ,OAAJ,CAAY,CAACK,OAAD,EAAUJ,MAAV,KAAqB;AACtC,UAAMK,aAAa,GAAGC,KAAK,IAAI;AAC9B,UAAIA,KAAJ,EAAW;AAAE;AACZA,QAAAA,KAAK,CAACC,YAAN,GAAqBJ,MAAM,CAACK,gBAAP,EAArB;AACA;;AAEDR,MAAAA,MAAM,CAACM,KAAD,CAAN;AACA,KAND;;AAQAH,IAAAA,MAAM,GAAGd,IAAI,CAACQ,WAAD,EAAcN,YAAY,CAACO,OAAD,CAA1B,EAAqCQ,KAAK,IAAI;AAC1D,UAAIA,KAAJ,EAAW;AACVD,QAAAA,aAAa,CAACC,KAAD,CAAb;AACA;AACA;;AAEDF,MAAAA,OAAO;AACP,KAPY,CAAb;AASAD,IAAAA,MAAM,CAACM,EAAP,CAAU,MAAV,EAAkB,MAAM;AACvB,UAAIN,MAAM,CAACO,iBAAP,KAA6BT,SAAjC,EAA4C;AAC3CI,QAAAA,aAAa,CAAC,IAAIb,cAAJ,EAAD,CAAb;AACA;AACD,KAJD;AAKA,GAvBK,CAAN;AAyBA,SAAOW,MAAM,CAACK,gBAAP,EAAP;AACA;;AAEDG,MAAM,CAACC,OAAP,GAAiBhB,SAAjB,C,CACA;;AACAe,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBjB,SAAzB;;AACAe,MAAM,CAACC,OAAP,CAAeE,MAAf,GAAwB,CAACX,MAAD,EAASL,OAAT,KAAqBF,SAAS,CAACO,MAAD,EAAS,EAAC,GAAGL,OAAJ;AAAaiB,EAAAA,QAAQ,EAAE;AAAvB,CAAT,CAAtD;;AACAJ,MAAM,CAACC,OAAP,CAAeI,KAAf,GAAuB,CAACb,MAAD,EAASL,OAAT,KAAqBF,SAAS,CAACO,MAAD,EAAS,EAAC,GAAGL,OAAJ;AAAakB,EAAAA,KAAK,EAAE;AAApB,CAAT,CAArD;;AACAL,MAAM,CAACC,OAAP,CAAepB,cAAf,GAAgCA,cAAhC","sourcesContent":["'use strict';\nconst pump = require('pump');\nconst bufferStream = require('./buffer-stream');\n\nclass MaxBufferError extends Error {\n\tconstructor() {\n\t\tsuper('maxBuffer exceeded');\n\t\tthis.name = 'MaxBufferError';\n\t}\n}\n\nasync function getStream(inputStream, options) {\n\tif (!inputStream) {\n\t\treturn Promise.reject(new Error('Expected a stream'));\n\t}\n\n\toptions = {\n\t\tmaxBuffer: Infinity,\n\t\t...options\n\t};\n\n\tconst {maxBuffer} = options;\n\n\tlet stream;\n\tawait new Promise((resolve, reject) => {\n\t\tconst rejectPromise = error => {\n\t\t\tif (error) { // A null check\n\t\t\t\terror.bufferedData = stream.getBufferedValue();\n\t\t\t}\n\n\t\t\treject(error);\n\t\t};\n\n\t\tstream = pump(inputStream, bufferStream(options), error => {\n\t\t\tif (error) {\n\t\t\t\trejectPromise(error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolve();\n\t\t});\n\n\t\tstream.on('data', () => {\n\t\t\tif (stream.getBufferedLength() > maxBuffer) {\n\t\t\t\trejectPromise(new MaxBufferError());\n\t\t\t}\n\t\t});\n\t});\n\n\treturn stream.getBufferedValue();\n}\n\nmodule.exports = getStream;\n// TODO: Remove this for the next major release\nmodule.exports.default = getStream;\nmodule.exports.buffer = (stream, options) => getStream(stream, {...options, encoding: 'buffer'});\nmodule.exports.array = (stream, options) => getStream(stream, {...options, array: true});\nmodule.exports.MaxBufferError = MaxBufferError;\n"]},"metadata":{},"sourceType":"script"}
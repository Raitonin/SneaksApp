{"ast":null,"code":"const request = require('request-promise');\n\nconst moment = require('moment');\n\nmodule.exports = (bearer, options) => new Promise(async (resolve, reject) => {\n  const {\n    amount,\n    variantID,\n    bidID,\n    currency,\n    cookieJar,\n    proxy,\n    userAgent\n  } = options;\n  const expiresAt = moment().add(30, 'days').utc().format();\n  const res = await request({\n    uri: 'https://stockx.com/api/portfolio?a=bid',\n    method: 'POST',\n    headers: {\n      'Host': 'stockx.com',\n      'sec-fetch-mode': 'cors',\n      'origin': 'https://stockx.com',\n      'authorization': `Bearer ${bearer}`,\n      'content-type': 'application/json',\n      'appos': 'web',\n      'x-requested-with': 'XMLHttpRequest',\n      'user-agent': userAgent,\n      'appversion': '0.1',\n      'accept': '*/*',\n      'sec-fetch-site': 'same-origin',\n      'accept-language': 'en-US,en;q=0.9'\n    },\n    json: {\n      PortfolioItem: {\n        localAmount: amount,\n        skuUuid: variantID,\n        localCurrency: currency,\n        expiresAt: expiresAt,\n        chainId: bidID\n      }\n    },\n    jar: cookieJar,\n    simple: false,\n    resolveWithFullResponse: true,\n    proxy: proxy\n  }).catch(err => reject(err));\n\n  if (res.statusCode !== 200) {\n    const e = new Error(`Status code error: ${res.statusCode}`);\n    e.statusCode = res.statusCode;\n    e.body = res.body;\n    throw e;\n  }\n\n  ;\n  resolve({\n    id: res.body.PortfolioItem.chainId,\n    response: res.body\n  });\n});","map":{"version":3,"sources":["/Users/dhruv/Sneaks/sneaks-website/node_modules/stockx-api/src/api/updatebid/updatebid.js"],"names":["request","require","moment","module","exports","bearer","options","Promise","resolve","reject","amount","variantID","bidID","currency","cookieJar","proxy","userAgent","expiresAt","add","utc","format","res","uri","method","headers","json","PortfolioItem","localAmount","skuUuid","localCurrency","chainId","jar","simple","resolveWithFullResponse","catch","err","statusCode","e","Error","body","id","response"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,CAACC,MAAD,EAASC,OAAT,KAAqB,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AACzE,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,KAArB;AAA4BC,IAAAA,QAA5B;AAAsCC,IAAAA,SAAtC;AAAiDC,IAAAA,KAAjD;AAAwDC,IAAAA;AAAxD,MAAsEV,OAA5E;AAEA,QAAMW,SAAS,GAAGf,MAAM,GAAGgB,GAAT,CAAa,EAAb,EAAiB,MAAjB,EAAyBC,GAAzB,GAA+BC,MAA/B,EAAlB;AACA,QAAMC,GAAG,GAAG,MAAMrB,OAAO,CAAC;AACtBsB,IAAAA,GAAG,EAAE,wCADiB;AAEtBC,IAAAA,MAAM,EAAE,MAFc;AAGtBC,IAAAA,OAAO,EAAE;AACL,cAAQ,YADH;AAEL,wBAAkB,MAFb;AAGL,gBAAU,oBAHL;AAIL,uBAAkB,UAASnB,MAAO,EAJ7B;AAKL,sBAAgB,kBALX;AAML,eAAS,KANJ;AAOL,0BAAoB,gBAPf;AAQL,oBAAcW,SART;AASL,oBAAc,KATT;AAUL,gBAAU,KAVL;AAWL,wBAAkB,aAXb;AAYL,yBAAmB;AAZd,KAHa;AAiBtBS,IAAAA,IAAI,EAAE;AACFC,MAAAA,aAAa,EAAE;AACXC,QAAAA,WAAW,EAAEjB,MADF;AAEXkB,QAAAA,OAAO,EAAEjB,SAFE;AAGXkB,QAAAA,aAAa,EAAEhB,QAHJ;AAIXI,QAAAA,SAAS,EAAEA,SAJA;AAKXa,QAAAA,OAAO,EAAElB;AALE;AADb,KAjBgB;AA0BtBmB,IAAAA,GAAG,EAAEjB,SA1BiB;AA2BtBkB,IAAAA,MAAM,EAAE,KA3Bc;AA4BtBC,IAAAA,uBAAuB,EAAE,IA5BH;AA6BtBlB,IAAAA,KAAK,EAAEA;AA7Be,GAAD,CAAP,CA+BjBmB,KA/BiB,CA+BXC,GAAG,IAAI1B,MAAM,CAAC0B,GAAD,CA/BF,CAAlB;;AAiCA,MAAId,GAAG,CAACe,UAAJ,KAAmB,GAAvB,EAA2B;AACvB,UAAMC,CAAC,GAAG,IAAIC,KAAJ,CAAW,sBAAqBjB,GAAG,CAACe,UAAW,EAA/C,CAAV;AACAC,IAAAA,CAAC,CAACD,UAAF,GAAef,GAAG,CAACe,UAAnB;AACAC,IAAAA,CAAC,CAACE,IAAF,GAASlB,GAAG,CAACkB,IAAb;AAEA,UAAMF,CAAN;AACH;;AAAA;AAED7B,EAAAA,OAAO,CAAC;AACJgC,IAAAA,EAAE,EAAEnB,GAAG,CAACkB,IAAJ,CAASb,aAAT,CAAuBI,OADvB;AAEJW,IAAAA,QAAQ,EAAEpB,GAAG,CAACkB;AAFV,GAAD,CAAP;AAIH,CAjDqC,CAAtC","sourcesContent":["const request = require('request-promise');\nconst moment = require('moment');\n\nmodule.exports = (bearer, options) => new Promise(async (resolve, reject) => {\n    const { amount, variantID, bidID, currency, cookieJar, proxy, userAgent } = options;\n\n    const expiresAt = moment().add(30, 'days').utc().format();\n    const res = await request({\n        uri: 'https://stockx.com/api/portfolio?a=bid',\n        method: 'POST',\n        headers: {\n            'Host': 'stockx.com',\n            'sec-fetch-mode': 'cors',\n            'origin': 'https://stockx.com',\n            'authorization': `Bearer ${bearer}`,\n            'content-type': 'application/json',\n            'appos': 'web',\n            'x-requested-with': 'XMLHttpRequest',\n            'user-agent': userAgent,\n            'appversion': '0.1',\n            'accept': '*/*',\n            'sec-fetch-site': 'same-origin',\n            'accept-language': 'en-US,en;q=0.9',\n        },\n        json: {\n            PortfolioItem: {\n                localAmount: amount,\n                skuUuid: variantID,\n                localCurrency: currency,\n                expiresAt: expiresAt,\n                chainId: bidID\n            }\n        },\n        jar: cookieJar,\n        simple: false,\n        resolveWithFullResponse: true,\n        proxy: proxy\n    })\n    .catch(err => reject(err));\n\n    if (res.statusCode !== 200){\n        const e = new Error(`Status code error: ${res.statusCode}`);\n        e.statusCode = res.statusCode;\n        e.body = res.body;\n\n        throw e;\n    };\n    \n    resolve({\n        id: res.body.PortfolioItem.chainId,\n        response: res.body\n    });\n});"]},"metadata":{},"sourceType":"script"}
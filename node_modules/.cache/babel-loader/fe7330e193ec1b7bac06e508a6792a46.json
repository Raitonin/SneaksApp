{"ast":null,"code":"const request = require('request-promise');\n\nconst cheerio = require('cheerio');\n\nmodule.exports = async (clientID, options) => {\n  const {\n    state,\n    user,\n    password,\n    cookieJar,\n    proxy,\n    userAgent\n  } = options; //Submit credentials\n\n  const reqOptions = {\n    uri: 'https://accounts.stockx.com/usernamepassword/login',\n    method: 'POST',\n    headers: {\n      'Host': 'accounts.stockx.com',\n      'sec-fetch-mode': 'cors',\n      'auth0-client': clientID,\n      'origin': 'https://accounts.stockx.com',\n      'user-agent': userAgent,\n      'content-type': 'application/json',\n      'sec-fetch-site': 'same-origin'\n    },\n    json: {\n      client_id: clientID,\n      redirect_uri: 'https://stockx.com/callback?path=/',\n      tenant: 'stockx-prod',\n      response_type: 'code',\n      audience: 'gateway.stockx.com',\n      state: state,\n      _csrf: 'OnRjJjWty9Fw6jz95NFqwoPV',\n      username: user,\n      password: password,\n      _instate: 'deprecated',\n      connection: 'production'\n    },\n    jar: cookieJar,\n    proxy: proxy,\n    resolveWithFullResponse: true,\n    simple: false\n  };\n  const res = await request(reqOptions);\n  if (res.statusCode == 401 && JSON.stringify(res.body).includes('Incorrect email or password')) throw new Error(\"Invalid credentials!\");else if (res.statusCode != 200) throw new Error(`Status code error ${res.statusCode} - Response: ${JSON.stringify(res.body)}`); //Fetch params needed for callback\n\n  const $ = cheerio.load(res.body);\n  const wa = $('input[name=\"wa\"]').val();\n  const wctx = $('input[name=\"wctx\"]').val();\n  const wresult = $('input[name=\"wresult\"]').val();\n  if (wa == undefined || wctx == undefined || wresult == undefined || wa == \"\" || wctx == \"\" || wresult == \"\") throw new Error(\"No paramaters found for callback\");\n  return {\n    wa,\n    wctx,\n    wresult\n  };\n};","map":{"version":3,"sources":["/Users/dhruv/Sneaks/sneaks-website/node_modules/stockx-api/src/api/login/submitcredentials.js"],"names":["request","require","cheerio","module","exports","clientID","options","state","user","password","cookieJar","proxy","userAgent","reqOptions","uri","method","headers","json","client_id","redirect_uri","tenant","response_type","audience","_csrf","username","_instate","connection","jar","resolveWithFullResponse","simple","res","statusCode","JSON","stringify","body","includes","Error","$","load","wa","val","wctx","wresult","undefined"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,OAAOC,QAAP,EAAiBC,OAAjB,KAA6B;AAC1C,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,QAAf;AAAyBC,IAAAA,SAAzB;AAAoCC,IAAAA,KAApC;AAA2CC,IAAAA;AAA3C,MAAyDN,OAA/D,CAD0C,CAE1C;;AACA,QAAMO,UAAU,GAAG;AACfC,IAAAA,GAAG,EAAE,oDADU;AAEfC,IAAAA,MAAM,EAAE,MAFO;AAGfC,IAAAA,OAAO,EAAE;AACL,cAAQ,qBADH;AAEL,wBAAkB,MAFb;AAGL,sBAAgBX,QAHX;AAIL,gBAAU,6BAJL;AAKL,oBAAcO,SALT;AAML,sBAAgB,kBANX;AAOL,wBAAkB;AAPb,KAHM;AAYfK,IAAAA,IAAI,EAAE;AACFC,MAAAA,SAAS,EAAEb,QADT;AAEFc,MAAAA,YAAY,EAAE,oCAFZ;AAGFC,MAAAA,MAAM,EAAE,aAHN;AAIFC,MAAAA,aAAa,EAAE,MAJb;AAKFC,MAAAA,QAAQ,EAAE,oBALR;AAMFf,MAAAA,KAAK,EAAEA,KANL;AAOFgB,MAAAA,KAAK,EAAE,0BAPL;AAQFC,MAAAA,QAAQ,EAAEhB,IARR;AASFC,MAAAA,QAAQ,EAAEA,QATR;AAUFgB,MAAAA,QAAQ,EAAE,YAVR;AAWFC,MAAAA,UAAU,EAAE;AAXV,KAZS;AAyBfC,IAAAA,GAAG,EAAEjB,SAzBU;AA0BfC,IAAAA,KAAK,EAAEA,KA1BQ;AA2BfiB,IAAAA,uBAAuB,EAAE,IA3BV;AA4BfC,IAAAA,MAAM,EAAE;AA5BO,GAAnB;AA+BA,QAAMC,GAAG,GAAG,MAAM9B,OAAO,CAACa,UAAD,CAAzB;AAEA,MAAIiB,GAAG,CAACC,UAAJ,IAAkB,GAAlB,IAAyBC,IAAI,CAACC,SAAL,CAAeH,GAAG,CAACI,IAAnB,EAAyBC,QAAzB,CAAkC,6BAAlC,CAA7B,EAA+F,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN,CAA/F,KACK,IAAIN,GAAG,CAACC,UAAJ,IAAkB,GAAtB,EAA2B,MAAM,IAAIK,KAAJ,CAAW,qBAAoBN,GAAG,CAACC,UAAW,gBAAeC,IAAI,CAACC,SAAL,CAAeH,GAAG,CAACI,IAAnB,CAAyB,EAAtF,CAAN,CArCU,CAuC1C;;AACA,QAAMG,CAAC,GAAGnC,OAAO,CAACoC,IAAR,CAAaR,GAAG,CAACI,IAAjB,CAAV;AACA,QAAMK,EAAE,GAAGF,CAAC,CAAC,kBAAD,CAAD,CAAsBG,GAAtB,EAAX;AACA,QAAMC,IAAI,GAAGJ,CAAC,CAAC,oBAAD,CAAD,CAAwBG,GAAxB,EAAb;AACA,QAAME,OAAO,GAAGL,CAAC,CAAC,uBAAD,CAAD,CAA2BG,GAA3B,EAAhB;AAEA,MAAID,EAAE,IAAII,SAAN,IAAmBF,IAAI,IAAIE,SAA3B,IAAwCD,OAAO,IAAIC,SAAnD,IAAgEJ,EAAE,IAAI,EAAtE,IAA4EE,IAAI,IAAI,EAApF,IAA0FC,OAAO,IAAI,EAAzG,EAA6G,MAAM,IAAIN,KAAJ,CAAU,kCAAV,CAAN;AAE7G,SAAO;AACHG,IAAAA,EADG;AAEHE,IAAAA,IAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH,CApDD","sourcesContent":["const request = require('request-promise');\nconst cheerio = require('cheerio');\n\nmodule.exports = async (clientID, options) => {\n    const { state, user, password, cookieJar, proxy, userAgent } = options;\n    //Submit credentials\n    const reqOptions = {\n        uri: 'https://accounts.stockx.com/usernamepassword/login',\n        method: 'POST',\n        headers: {\n            'Host': 'accounts.stockx.com',\n            'sec-fetch-mode': 'cors',\n            'auth0-client': clientID,\n            'origin': 'https://accounts.stockx.com',\n            'user-agent': userAgent,\n            'content-type': 'application/json',\n            'sec-fetch-site': 'same-origin'\n        },\n        json: {\n            client_id: clientID,\n            redirect_uri: 'https://stockx.com/callback?path=/',\n            tenant: 'stockx-prod',\n            response_type: 'code',\n            audience: 'gateway.stockx.com',\n            state: state,\n            _csrf: 'OnRjJjWty9Fw6jz95NFqwoPV',\n            username: user,\n            password: password,\n            _instate: 'deprecated',\n            connection: 'production'\n        },\n        jar: cookieJar,\n        proxy: proxy,\n        resolveWithFullResponse: true,\n        simple: false\n    };\n\n    const res = await request(reqOptions);\n\n    if (res.statusCode == 401 && JSON.stringify(res.body).includes('Incorrect email or password')) throw new Error(\"Invalid credentials!\");\n    else if (res.statusCode != 200) throw new Error(`Status code error ${res.statusCode} - Response: ${JSON.stringify(res.body)}`);\n\n    //Fetch params needed for callback\n    const $ = cheerio.load(res.body);\n    const wa = $('input[name=\"wa\"]').val();\n    const wctx = $('input[name=\"wctx\"]').val();\n    const wresult = $('input[name=\"wresult\"]').val();\n\n    if (wa == undefined || wctx == undefined || wresult == undefined || wa == \"\" || wctx == \"\" || wresult == \"\") throw new Error(\"No paramaters found for callback\");\n\n    return {\n        wa,\n        wctx,\n        wresult\n    };\n};"]},"metadata":{},"sourceType":"script"}
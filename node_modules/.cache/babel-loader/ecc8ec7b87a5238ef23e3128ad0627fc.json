{"ast":null,"code":"const request = require('request-promise');\n\nconst searchProducts = require('../api/scrapers/searchproducts');\n\nconst fetchProductDetails = require('../api/scrapers/fetchproductdetails');\n\nconst newSearchProducts = require('../api/scrapers/newsearchproducts');\n\nconst login = require('../api/login/login');\n\nconst placeBid = require('../api/placebid/index');\n\nconst placeAsk = require('../api/placeask/index');\n\nconst updateAsk = require('../api/updateask/index');\n\nconst deleteAsk = require('../api/deleteask/index');\n\nconst updateBid = require('../api/updatebid/index');\n\nconst deleteBid = require('../api/deletebid/index');\n\nconst formatProxy = require('../utils/formatproxy');\n\nmodule.exports = class StockX {\n  /**\n   * \n   * @param {Object=} options\n   * @param options.proxy - The proxy to make requests with\n   * @param options.currency - The currency to make requests in \n   */\n  constructor(options = {}) {\n    const {\n      proxy,\n      currency,\n      userAgent\n    } = options; //Configure options\n\n    this.currency = 'USD';\n    this.cookieJar = request.jar();\n    this.loggedIn = false;\n    this.userAgent = userAgent !== undefined ? userAgent : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36';\n    this.currency = currency == undefined ? 'USD' : currency;\n    this.proxy = proxy == undefined || proxy.trim() == '' ? undefined : formatProxy(proxy);\n  }\n\n  /**\n   * \n   * @param {string} query - The query string to search for \n   * @param {Object=} options\n   * @param {Number=} options.limit - The limit on how many products to return at max \n   */\n  async searchProducts(query, options = {}) {\n    //Search products and return them\n    const {\n      limit\n    } = options;\n    const products = await searchProducts(query, {\n      limit,\n      proxy: this.proxy,\n      userAgent: this.userAgent\n    });\n    return products;\n  }\n\n  /**\n   * \n   * @param {string} query - The query string to search for \n   * @param {Object=} options\n   * @param {Number=} options.limit - The limit on how many products to return at max \n  */\n  async newSearchProducts(query, options = {}) {\n    //Search products and return them\n    const {\n      limit\n    } = options;\n    const products = await newSearchProducts(query, {\n      limit,\n      proxy: this.proxy,\n      userAgent: this.userAgent\n    });\n    return products;\n  }\n\n  /**\n   * \n   * @param {string|Object} product - The product URL or object to fetch from\n   */\n  async fetchProductDetails(product) {\n    //Fetch products and return them\n    const products = await fetchProductDetails(product, {\n      currency: this.currency,\n      proxy: this.proxy,\n      userAgent: this.userAgent\n    });\n    return products;\n  }\n\n  /**\n   * \n   * @param {Object} options\n   * @param {string} options.user - The user/email to login with\n   * @param {string} options.password - The password to login with \n   */\n  async login(options = {}) {\n    const {\n      user,\n      password\n    } = options; //Create login\n\n    await login({\n      user,\n      password,\n      proxy: this.proxy,\n      cookieJar: this.cookieJar,\n      userAgent: this.userAgent\n    }); //Verify a token was created\n\n    this.token = this.cookieJar._jar.store.idx[\"stockx.com\"][\"/\"].token;\n    if (this.token == undefined) throw new Error(\"No login token found!\"); //Store the account token as a local class variable\n\n    this.token = this.token.toString().split('token=')[1].split(';')[0];\n    this.loggedIn = true;\n  }\n\n  /**\n   * \n   * @param {Object} product - The product object\n   * @param {Object} options \n   * @param {number} options.amount - The amount to place the bid for\n   * @param {string} options.size - The requested size\n   */\n  async placeBid(product, options = {}) {\n    //Convert amount to numeral type\n    const amount = Number(options.amount);\n    const requestedSize = options.size; //Verify fields passed in by user\n\n    if (!this.loggedIn) throw new Error(\"You must be logged in before placing a bid!\");else if (amount == NaN) throw new Error(\"Amount is incorrect, please ensure your parameters are correctly formatted.\");else if (requestedSize == undefined) throw new Error(\"Please specify a size to bid on!\");else if (product == undefined) throw new Error(\"A product must be specified!\");else if (typeof product == 'string') throw new Error(\"The product passed in must an object. Use fetchProductDetails() to get the details first.\");else if (product.variants == undefined) throw new Error(\"No variants found in product! Please check the product object passed in.\"); //Get size from requestedSize in the product variants\n\n    const size = requestedSize.toLowerCase() == 'random' ? product.variants[Math.floor(Math.random() * product.variants.length)] : product.variants.find(variant => variant.size == requestedSize); //Check if getting size was successful\n\n    if (size == undefined) throw new Error(\"No variant found for the requested size!\");\n    if (size.uuid == undefined || size.uuid == \"\") throw new Error(\"No variant ID found for the requested size!\"); //Place bid\n\n    const response = await placeBid(this.token, {\n      amount: amount,\n      variantID: size.uuid,\n      currency: this.currency,\n      cookieJar: this.cookieJar,\n      proxy: this.proxy,\n      userAgent: this.userAgent\n    });\n    return response;\n  }\n\n  /**\n   * \n   * @param {Object} product - The product object \n   * @param {Object} options \n   * @param {number} options.amount - The amount to place the ask for\n   * @param {string} options.size - The requested size\n   */\n  async placeAsk(product, options = {}) {\n    //Convert amount to digit\n    const amount = Number(options.amount);\n    const requestedSize = options.size; //Verify fields passed in by user\n\n    if (!this.loggedIn) throw new Error(\"You must be logged in before placing an ask!\");else if (amount == NaN) throw new Error(\"Amount is incorrect, please ensure your parameters are correctly formatted.\");else if (requestedSize == undefined) throw new Error(\"Please specify a size to place an ask on!\");else if (product == undefined) throw new Error(\"A product must be specified!\");else if (typeof product == 'string') throw new Error(\"The product passed in must an object. Use fetchProductDetails() to get the details first.\");else if (product.variants == undefined) throw new Error(\"No variants found in product! Please check the product object passed in.\"); //Get size from requestedSize in the product variants\n\n    const size = requestedSize.toLowerCase() == 'random' ? product.variants[Math.floor(Math.random() * product.variants.length)] : product.variants.find(variant => variant.size == requestedSize); //Check if getting size was successful\n\n    if (size == undefined) throw new Error(\"No variant found for the requested size!\");\n    if (size.uuid == undefined || size.uuid == \"\") throw new Error(\"No variant ID found for the requested size!\"); //Place ask\n\n    const response = await placeAsk(this.token, {\n      amount,\n      variantID: size.uuid,\n      currency: this.currency,\n      cookieJar: this.cookieJar,\n      proxy: this.proxy,\n      userAgent: this.userAgent\n    });\n    return response;\n  }\n\n  /**\n   * \n   * @param {Object} ask - The previous ask object\n   * @param {Object} options\n   * @param {number} options.amount - The amount to update the ask to\n   */\n  async updateAsk(ask, options = {}) {\n    //Convert amount to digit\n    const amount = Number(options.amount); //Verify fields passed in by user\n\n    if (!this.loggedIn) throw new Error(\"You must be logged in before placing an ask!\");else if (amount == NaN) throw new Error(\"Amount is incorrect, please ensure your parameters are correctly formatted.\");else if (ask == undefined) throw new Error(\"Ask is incorrect, please ensure your parameters are correctly formatted.\"); //Get size from previous ask size\n\n    const size = ask.response.PortfolioItem.skuUuid; //Check if getting size was successful\n\n    if (size == undefined) throw new Error(\"No variant found in ask!\"); //Update ask\n\n    const response = await updateAsk(this.token, {\n      amount,\n      variantID: size,\n      askID: ask.id,\n      currency: this.currency,\n      cookieJar: this.cookieJar,\n      proxy: this.proxy,\n      userAgent: this.userAgent\n    });\n    return response;\n  }\n\n  /**\n   * \n   * @param {Object} ask - The previous ask object\n   * @param {number} ask.id - The id of the ask\n   */\n  async deleteAsk(ask) {\n    //Verify fields passed in by user\n    if (!this.loggedIn) throw new Error(\"You must be logged in before deleting an ask!\");else if (ask == undefined) throw new Error(\"Ask is incorrect, please ensure your parameters are correctly formatted.\"); //Delete ask\n\n    const response = await deleteAsk(this.token, {\n      askID: ask.id,\n      cookieJar: this.cookieJar,\n      proxy: this.proxy,\n      userAgent: this.userAgent\n    });\n    return response;\n  }\n\n  /**\n   * \n   * @param {Object} bid - The previous ask object\n   * @param {number} bid.id - The id of the ask\n   */\n  async deleteBid(bid) {\n    //Verify fields passed in by user\n    if (!this.loggedIn) throw new Error(\"You must be logged in before deleting a bid!\");else if (bid == undefined) throw new Error(\"Bid is incorrect, please ensure your parameters are correctly formatted.\"); //Delete bid\n\n    const response = await deleteBid(this.token, {\n      bidID: bid.id,\n      cookieJar: this.cookieJar,\n      proxy: this.proxy,\n      userAgent: this.userAgent\n    });\n    return response;\n  }\n\n  /**\n   * \n   * @param {Object} bid - The previous bid object\n   * @param {Object} options\n   * @param {number} options.amount - The amount to update the bid to \n   */\n  async updateBid(bid, options = {}) {\n    //Convert amount to digit\n    const amount = Number(options.amount); //Verify fields passed in by user\n\n    if (!this.loggedIn) throw new Error(\"You must be logged in before placing a bid!\");else if (amount == NaN) throw new Error(\"Amount is incorrect, please ensure your parameters are correctly formatted.\");else if (bid == undefined) throw new Error(\"Ask is incorrect, please ensure your parameters are correctly formatted.\"); //Get size from previous ask size\n\n    const size = bid.response.PortfolioItem.skuUuid; //Check if getting size was successful\n\n    if (size == undefined) throw new Error(\"No variant found in bid!\"); //Update ask\n\n    const response = await updateBid(this.token, {\n      amount,\n      variantID: size,\n      bidID: bid.id,\n      currency: this.currency,\n      cookieJar: this.cookieJar,\n      proxy: this.proxy,\n      userAgent: this.userAgent\n    });\n    return response;\n  }\n\n};","map":{"version":3,"sources":["/Users/dhruv/Sneaks/sneaks-website/node_modules/stockx-api/src/classes/Stockx.js"],"names":["request","require","searchProducts","fetchProductDetails","newSearchProducts","login","placeBid","placeAsk","updateAsk","deleteAsk","updateBid","deleteBid","formatProxy","module","exports","StockX","constructor","options","proxy","currency","userAgent","cookieJar","jar","loggedIn","undefined","trim","query","limit","products","product","user","password","token","_jar","store","idx","Error","toString","split","amount","Number","requestedSize","size","NaN","variants","toLowerCase","Math","floor","random","length","find","variant","uuid","response","variantID","ask","PortfolioItem","skuUuid","askID","id","bid","bidID"],"mappings":"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","sourcesContent":["const request = require('request-promise');\nconst searchProducts = require('../api/scrapers/searchproducts');\nconst fetchProductDetails = require('../api/scrapers/fetchproductdetails');\nconst newSearchProducts = require('../api/scrapers/newsearchproducts');\nconst login = require('../api/login/login');\nconst placeBid = require('../api/placebid/index');\nconst placeAsk = require('../api/placeask/index');\nconst updateAsk = require('../api/updateask/index');\nconst deleteAsk = require('../api/deleteask/index');\nconst updateBid = require('../api/updatebid/index');\nconst deleteBid = require('../api/deletebid/index');\nconst formatProxy = require('../utils/formatproxy');\n\nmodule.exports = class StockX {\n    /**\n     * \n     * @param {Object=} options\n     * @param options.proxy - The proxy to make requests with\n     * @param options.currency - The currency to make requests in \n     */\n    constructor(options = {}){\n        const { proxy, currency, userAgent } = options;\n\n        //Configure options\n        this.currency = 'USD';\n        this.cookieJar = request.jar();\n        this.loggedIn = false;\n        this.userAgent = userAgent !== undefined ? userAgent : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36';\n\n        this.currency = currency == undefined ? 'USD' : currency;\n        this.proxy = proxy == undefined || proxy.trim() == '' ? undefined : formatProxy(proxy);\n    };\n\n    /**\n     * \n     * @param {string} query - The query string to search for \n     * @param {Object=} options\n     * @param {Number=} options.limit - The limit on how many products to return at max \n     */\n    async searchProducts(query, options = {}){\n        //Search products and return them\n        const { limit } = options;\n\n        const products = await searchProducts(query, {\n            limit, \n            proxy: this.proxy,\n            userAgent: this.userAgent\n        });\n\n        return products;\n    };\n\n    /**\n     * \n     * @param {string} query - The query string to search for \n     * @param {Object=} options\n     * @param {Number=} options.limit - The limit on how many products to return at max \n    */\n    async newSearchProducts(query, options = {}){\n        //Search products and return them\n        const { limit } = options;\n\n        const products = await newSearchProducts(query, {\n            limit, \n            proxy: this.proxy,\n            userAgent: this.userAgent\n        });\n\n        return products;\n    };\n\n    /**\n     * \n     * @param {string|Object} product - The product URL or object to fetch from\n     */\n    async fetchProductDetails(product){\n        //Fetch products and return them\n        const products = await fetchProductDetails(product, {\n            currency: this.currency, \n            proxy: this.proxy,\n            userAgent: this.userAgent\n        });\n\n        return products;\n    };\n\n    /**\n     * \n     * @param {Object} options\n     * @param {string} options.user - The user/email to login with\n     * @param {string} options.password - The password to login with \n     */\n    async login(options = {}){\n        const { user, password } = options;\n\n        //Create login\n        await login({\n            user,\n            password, \n            proxy: this.proxy,\n            cookieJar: this.cookieJar,\n            userAgent: this.userAgent\n        });\n\n        //Verify a token was created\n        this.token = this.cookieJar._jar.store.idx[\"stockx.com\"][\"/\"].token;\n        if (this.token == undefined) throw new Error(\"No login token found!\");\n\n        //Store the account token as a local class variable\n        this.token = this.token.toString().split('token=')[1].split(';')[0];\n        this.loggedIn = true;\n    };\n\n    /**\n     * \n     * @param {Object} product - The product object\n     * @param {Object} options \n     * @param {number} options.amount - The amount to place the bid for\n     * @param {string} options.size - The requested size\n     */\n    async placeBid(product, options = {}){\n        //Convert amount to numeral type\n        const amount = Number(options.amount);\n        const requestedSize = options.size;\n\n        //Verify fields passed in by user\n        if (!this.loggedIn) throw new Error(\"You must be logged in before placing a bid!\");\n        else if (amount == NaN) throw new Error(\"Amount is incorrect, please ensure your parameters are correctly formatted.\");\n        else if (requestedSize == undefined) throw new Error(\"Please specify a size to bid on!\");\n        else if (product == undefined) throw new Error(\"A product must be specified!\");\n        else if (typeof product == 'string') throw new Error(\"The product passed in must an object. Use fetchProductDetails() to get the details first.\");\n        else if (product.variants == undefined) throw new Error(\"No variants found in product! Please check the product object passed in.\");\n\n        //Get size from requestedSize in the product variants\n        const size = requestedSize.toLowerCase() == 'random' ? product.variants[Math.floor(Math.random() * product.variants.length)] : product.variants.find(variant => variant.size == requestedSize);\n        \n        //Check if getting size was successful\n        if (size == undefined) throw new Error(\"No variant found for the requested size!\"); \n        if (size.uuid == undefined || size.uuid == \"\") throw new Error(\"No variant ID found for the requested size!\");  \n        \n        //Place bid\n        const response = await placeBid(this.token, {\n            amount: amount, \n            variantID: size.uuid, \n            currency: this.currency, \n            cookieJar: this.cookieJar, \n            proxy: this.proxy,\n            userAgent: this.userAgent\n        });\n\n        return response;\n    };\n\n    /**\n     * \n     * @param {Object} product - The product object \n     * @param {Object} options \n     * @param {number} options.amount - The amount to place the ask for\n     * @param {string} options.size - The requested size\n     */\n    async placeAsk(product, options = {}){\n        //Convert amount to digit\n        const amount = Number(options.amount);\n        const requestedSize = options.size;\n\n        //Verify fields passed in by user\n        if (!this.loggedIn) throw new Error(\"You must be logged in before placing an ask!\");\n        else if (amount == NaN) throw new Error(\"Amount is incorrect, please ensure your parameters are correctly formatted.\");\n        else if (requestedSize == undefined) throw new Error(\"Please specify a size to place an ask on!\");\n        else if (product == undefined) throw new Error(\"A product must be specified!\");\n        else if (typeof product == 'string') throw new Error(\"The product passed in must an object. Use fetchProductDetails() to get the details first.\");\n        else if (product.variants == undefined) throw new Error(\"No variants found in product! Please check the product object passed in.\");\n\n        //Get size from requestedSize in the product variants\n        const size = requestedSize.toLowerCase() == 'random' ? product.variants[Math.floor(Math.random() * product.variants.length)] : product.variants.find(variant => variant.size == requestedSize);\n        \n        //Check if getting size was successful\n        if (size == undefined) throw new Error(\"No variant found for the requested size!\"); \n        if (size.uuid == undefined || size.uuid == \"\") throw new Error(\"No variant ID found for the requested size!\");  \n        \n        //Place ask\n        const response = await placeAsk(this.token, {\n            amount, \n            variantID: size.uuid, \n            currency: this.currency, \n            cookieJar: this.cookieJar, \n            proxy: this.proxy,\n            userAgent: this.userAgent\n        });\n\n        return response;\n    };\n\n    /**\n     * \n     * @param {Object} ask - The previous ask object\n     * @param {Object} options\n     * @param {number} options.amount - The amount to update the ask to\n     */\n    async updateAsk(ask, options = {}){\n        //Convert amount to digit\n        const amount = Number(options.amount);\n\n        //Verify fields passed in by user\n        if (!this.loggedIn) throw new Error(\"You must be logged in before placing an ask!\");\n        else if (amount == NaN) throw new Error(\"Amount is incorrect, please ensure your parameters are correctly formatted.\");\n        else if (ask == undefined) throw new Error(\"Ask is incorrect, please ensure your parameters are correctly formatted.\");\n\n        //Get size from previous ask size\n        const size = ask.response.PortfolioItem.skuUuid;\n\n        //Check if getting size was successful\n        if (size == undefined) throw new Error(\"No variant found in ask!\"); \n\n        //Update ask\n        const response = await updateAsk(this.token, {\n            amount, \n            variantID: size, \n            askID: ask.id, \n            currency: this.currency, \n            cookieJar: this.cookieJar, \n            proxy: this.proxy,\n            userAgent: this.userAgent\n        });\n\n        return response;\n    };\n\n    /**\n     * \n     * @param {Object} ask - The previous ask object\n     * @param {number} ask.id - The id of the ask\n     */\n    async deleteAsk(ask){\n        //Verify fields passed in by user\n        if (!this.loggedIn) throw new Error(\"You must be logged in before deleting an ask!\");\n        else if (ask == undefined) throw new Error(\"Ask is incorrect, please ensure your parameters are correctly formatted.\");\n\n        //Delete ask\n        const response = await deleteAsk(this.token, {\n            askID: ask.id, \n            cookieJar: this.cookieJar, \n            proxy: this.proxy,\n            userAgent: this.userAgent\n        });\n\n        return response;\n    };\n\n    /**\n     * \n     * @param {Object} bid - The previous ask object\n     * @param {number} bid.id - The id of the ask\n     */\n    async deleteBid(bid){\n        //Verify fields passed in by user\n        if (!this.loggedIn) throw new Error(\"You must be logged in before deleting a bid!\");\n        else if (bid == undefined) throw new Error(\"Bid is incorrect, please ensure your parameters are correctly formatted.\");\n\n        //Delete bid\n        const response = await deleteBid(this.token, {\n            bidID: bid.id, \n            cookieJar: this.cookieJar, \n            proxy: this.proxy,\n            userAgent: this.userAgent\n        });\n\n        return response;\n    };\n\n    /**\n     * \n     * @param {Object} bid - The previous bid object\n     * @param {Object} options\n     * @param {number} options.amount - The amount to update the bid to \n     */\n    async updateBid(bid, options = {}){\n        //Convert amount to digit\n        const amount = Number(options.amount);\n\n        //Verify fields passed in by user\n        if (!this.loggedIn) throw new Error(\"You must be logged in before placing a bid!\");\n        else if (amount == NaN) throw new Error(\"Amount is incorrect, please ensure your parameters are correctly formatted.\");\n        else if (bid == undefined) throw new Error(\"Ask is incorrect, please ensure your parameters are correctly formatted.\");\n\n        //Get size from previous ask size\n        const size = bid.response.PortfolioItem.skuUuid;\n\n        //Check if getting size was successful\n        if (size == undefined) throw new Error(\"No variant found in bid!\"); \n\n        //Update ask\n        const response = await updateBid(this.token, {\n            amount, \n            variantID: size, \n            bidID: bid.id, \n            currency: this.currency, \n            cookieJar: this.cookieJar, \n            proxy: this.proxy,\n            userAgent: this.userAgent\n        });\n\n        return response;\n    };\n};"]},"metadata":{},"sourceType":"script"}